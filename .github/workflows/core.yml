name: Reusable Core CI/CD Pipeline

on:
  workflow_call:
    inputs:
      directory:
        required: true
        type: string
      image:
        required: true
        type: string
      lang:
        required: true
        type: string
      version:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ACCOUNT_ID:
        required: true

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-southeast-5

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
      - name: Set up Node.js
        if: ${{ inputs.lang == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.version }}

      - name: Set up Python
        if: ${{ inputs.lang == 'python' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.version }}

      - name: Install deps
        run: |
          cd ${{ inputs.directory }}
          if [ "${{ inputs.lang }}" == "node" ]; then
            npm ci
          else
            pip install -r requirements.txt
          fi

      - name: Run tests
        run: |
          cd ${{ inputs.directory }}
          if [ "${{ inputs.lang }}" == "node" ]; then
            npm run test
          else
            python -m pytest test_app.py
          fi

      - name: Build, tag and push image to ECR
        if: github.ref_name == 'main' || github.event.pull_request.base.ref == 'main'
        run: |
          cd ${{ inputs.directory }}
          
          IMAGE_REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ inputs.image }}
          
          docker build -t ${{ inputs.image }} .
          
          docker tag ${{ inputs.image }} $IMAGE_REPO:${{ github.sha }}
          docker tag ${{ inputs.image }} $IMAGE_REPO:latest
          
          docker push $IMAGE_REPO:${{ github.sha }}
          docker push $IMAGE_REPO:latest
